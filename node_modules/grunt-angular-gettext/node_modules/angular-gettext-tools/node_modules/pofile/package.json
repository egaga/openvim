{
  "name": "pofile",
  "description": "Parse and serialize Gettext PO files.",
  "version": "0.2.12",
  "author": {
    "name": "Ruben Vermeersch",
    "email": "ruben@savanne.be",
    "url": "http://savanne.be/"
  },
  "contributors": [
    {
      "name": "Eyal Lewinsohn"
    },
    {
      "name": "Gabe Gorelick"
    },
    {
      "name": "Julian BÃ¤ume"
    },
    {
      "name": "Mike Holly"
    },
    {
      "name": "Sander Houttekier"
    }
  ],
  "homepage": "http://github.com/rubenv/pofile",
  "repository": {
    "type": "git",
    "url": "http://github.com/rubenv/pofile.git"
  },
  "main": "./lib/po",
  "keywords": [
    "i18n",
    "l10n",
    "gettext",
    "mo",
    "po"
  ],
  "scripts": {
    "test": "grunt test",
    "prepublish": "grunt build"
  },
  "directories": {
    "test": "test"
  },
  "devDependencies": {
    "browserify": "~3.11.1",
    "grunt": "~0.4.2",
    "grunt-browserify": "~1.3.0",
    "grunt-bump": "0.0.13",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-jshint": "~0.7.2",
    "grunt-contrib-uglify": "~0.2.7",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-jscs-checker": "^0.5.1",
    "grunt-mocha-cli": "~1.4.0"
  },
  "dependencies": {
    "lodash.isarray": "~2.4.1"
  },
  "readme": "# pofile - gettext .po parsing for JavaScript\n\n> Parse and serialize Gettext PO files.\n\n[![Build Status](https://travis-ci.org/rubenv/pofile.png?branch=master)](https://travis-ci.org/rubenv/pofile)\n\n## Usage\nAdd pofile to your project:\n\n### Installation (Node.JS, browser via Browserified)\n```\nnpm install --save pofile\n```\n\nReference it in your code:\n\n```js\nvar PO = require('pofile');\n```\n\n### Installation (via bower)\n```\nbower install --save pofile\n```\n\nAdd it to your HTML file:\n\n```html\n<script src=\"bower_components/pofile/dist/pofile.js\"></script>\n```\n\nReference it in your code:\n\n```js\nvar PO = require('pofile');\n```\n\n### Loading and parsing\n\nYou can create a new empty PO file by using the class:\n\n```js\nvar po = new PO();\n```\n\nOr by loading a file (Node.JS only):\n\n```js\nPO.load('text.po', function (err, po) {\n    // Handle err if needed\n    // Do things with po\n});\n```\n\nOr by parsing a string:\n\n```js\nvar po = PO.parse(myString);\n```\n\n### The PO class\n\nThe `PO` class exposes three members:\n\n* `comments`: An array of comments (found at the header of the file).\n* `headers`: A dictionary of the headers.\n* `items`: An array of `PO.Item` objects, each of which represents a string\n  from the gettext catalog.\n\nThere are two methods available:\n\n* `save`: Accepts a filename and callback, writes the po file to disk.\n\n```js\npo.save('out.po', function (err) {\n    // Handle err if needed\n});\n```\n\n* `toString`: Serializes the po file to a string.\n\n### The PO.Item class\n\nThe `PO` class exposes the following members:\n\n* `msgid`: The message id.\n* `msgid_plural`: The plural message id (null if absent).\n* `msgstr`: An array of translated strings. Items that have no plural msgid\n  only have one element in this array.\n* `references`: An array of reference strings.\n* `comments`: An array of string translator comments.\n* `extractedComments`: An array of string extracted comments.\n* `flags`: A dictionary of the string flags. Each flag is mapped to a key with\n  value true. For instance, a string with the fuzzy flag set will have\n  `item.flags.fuzzy == true`.\n* `msgctxt`: Context of the message, an arbitrary string, can be used for disambiguation.\n\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding\nstyle. Add unit tests for any new or changed functionality. Lint and test your\ncode using [Grunt](http://gruntjs.com/).\n\n## Credits\n\nOriginally based on node-po (written by Michael Holly). Rebranded because\nnode-po is unmaintained and because this library is no longer limited to\nNode.JS: it works in the browser too.\n\n### Changes compared to node-po\n\n* Proper handling of async methods that won't crash your Node.JS process when\n  something goes wrong.\n* Support for parsing string flags (e.g. fuzzy).\n* A test suite.\n* Browser support (through Browserified and bower).\n\n### Migrating from node-po\n\nYou'll need to update the module reference: `require('pofile')` instead of\n`require('node-po')`.\n\nAt the initial release, node-po and pofile have identical APIs, with one small\nexception: the `save` and `load` methods now take a callback that has an `err`\nparameter: `(err)` for `save` and `(err, po)` for `load`. This is similar to\nNode.JS conventions.\n\nChange code such as:\n\n```js\nPO.load('text.po', function (po) {\n```\n\nTo:\n\n```js\nPO.load('text.po', function (err, po) {\n    // Handle err if needed\n```\n\n## License \n\n    (The MIT License)\n\n    Copyright (C) 2013-2014 by Ruben Vermeersch <ruben@rocketeer.be>\n    Copyright (C) 2012 by Michael Holly\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n    THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "pofile@0.2.12",
  "_from": "pofile@~0.2.8"
}
